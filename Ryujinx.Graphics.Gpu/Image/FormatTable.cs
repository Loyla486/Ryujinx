using Ryujinx.Graphics.GAL;
using System.Collections.Generic;

namespace Ryujinx.Graphics.Gpu.Image
{
    /// <summary>
    /// Contains format tables, for texture and vertex attribute formats.
    /// </summary>
    static class FormatTable
    {
        private enum GpuFormat
        {
            R8                  = 0x1D,
            R16                 = 0x1B,
            R32                 = 0x0F,
            G8R8                = 0x18,
            R16G16              = 0x0C,
            R32G32              = 0x04,
            R32G32B32           = 0x02,
            A8B8G8R8            = 0x08,
            R16G16B16A16        = 0x03,
            R32G32B32A32        = 0x01,
            X8Z24X20V4S8COV4R4V = 0x3A,
            Zf32                = 0x2F,
            G24R8               = 0x0E,
            Z24S8               = 0x29,
            R32B24G8            = 0x05,
            Zf32X24S8           = 0x30,
            A4B4G4R4            = 0x12,
            A1B5G5R5            = 0x14,
            B5G6R5              = 0x15,
            A2B10G10R10         = 0x09,
            Bf10GF11RF11        = 0x21,
            E5B9G9R9SharedExp   = 0x20,
            Bc1                 = 0x24,
            Bc2                 = 0x25,
            Bc3                 = 0x26,
            A5B5G5R1            = 0x13,
            Bc4                 = 0x27,
            Bc5                 = 0x28,
            Bc7U                = 0x17,
            Etc2Rgba            = 0x0B,
            Bc6HSfloat          = 0x10,
            Bc6HUfloat          = 0x11,
            Astc2D4X4           = 0x40,
            Astc2D5x4           = 0x50,
            Astc2D5x5           = 0x41,
            Astc2D6x5           = 0x51,
            Astc2D6x6           = 0x42,
            Astc2D8x5           = 0x55,
            Astc2D8x6           = 0x52,
            Astc2D8x8           = 0x44,
            Astc2D10x5          = 0x56,
            Astc2D10x6          = 0x57,
            Astc2D10x8          = 0x53,
            Astc2D10x10         = 0x45,
            Astc2D12x10         = 0x54,
            Astc2D12x12         = 0x46,
            X8Z24               = 0x2a,
            S8Z24               = 0x2b,
            G8B8G8R8            = 0x22,
            B8G8R8G8            = 0x23,

            RSnorm = 0x1 << 7,
            GSnorm = 0x1 << 10,
            BSnorm = 0x1 << 13,
            ASnorm = 0x1 << 16,

            RUnorm = 0x2 << 7,
            GUnorm = 0x2 << 10,
            BUnorm = 0x2 << 13,
            AUnorm = 0x2 << 16,

            RSint = 0x3 << 7,
            GSint = 0x3 << 10,
            BSint = 0x3 << 13,
            ASint = 0x3 << 16,

            RUint = 0x4 << 7,
            GUint = 0x4 << 10,
            BUint = 0x4 << 13,
            AUint = 0x4 << 16,

            RSNormForceFP16 = 0x5 << 7,
            GSNormForceFP16 = 0x5 << 10,
            BSNormForceFP16 = 0x5 << 13,
            ASNormForceFP16 = 0x5 << 16,

            RFloat = 0x7 << 7,
            GFloat = 0x7 << 10,
            BFloat = 0x7 << 13,
            AFloat = 0x7 << 16,

            Srgb = 0x1 << 19,

            // Texture Names
            R8Unorm                  = R8                  | RUnorm | GUnorm | BUnorm | AUnorm,
            R8Snorm                  = R8                  | RSnorm | GSnorm | BSnorm | ASnorm,
            R8Uint                   = R8                  | RUint  | GUint  | BUint  | AUint,
            R8Sint                   = R8                  | RSint  | GSint  | BSint  | ASint,
            R16Float                 = R16                 | RFloat | GFloat | BFloat | AFloat,
            R16Unorm                 = R16                 | RUnorm | GUnorm | BUnorm | AUnorm,
            R16Snorm                 = R16                 | RSnorm | GSnorm | BSnorm | ASnorm,
            R16Uint                  = R16                 | RUint  | GUint  | BUint  | AUint,
            R16Sint                  = R16                 | RSint  | GSint  | BSint  | ASint,
            R32Float                 = R32                 | RFloat | GFloat | BFloat | AFloat,
            R32Uint                  = R32                 | RUint  | GUint  | BUint  | AUint,
            R32Sint                  = R32                 | RSint  | GSint  | BSint  | ASint,
            G8R8Unorm                = G8R8                | RUnorm | GUnorm | BUnorm | AUnorm,
            G8R8Snorm                = G8R8                | RSnorm | GSnorm | BSnorm | ASnorm,
            G8R8Uint                 = G8R8                | RUint  | GUint  | BUint  | AUint,
            G8R8Sint                 = G8R8                | RSint  | GSint  | BSint  | ASint,
            R16G16Float              = R16G16              | RFloat | GFloat | BFloat | AFloat,
            R16G16Unorm              = R16G16              | RUnorm | GUnorm | BUnorm | AUnorm,
            R16G16Snorm              = R16G16              | RSnorm | GSnorm | BSnorm | ASnorm,
            R16G16Uint               = R16G16              | RUint  | GUint  | BUint  | AUint,
            R16G16Sint               = R16G16              | RSint  | GSint  | BSint  | ASint,
            R32G32Float              = R32G32              | RFloat | GFloat | BFloat | AFloat,
            R32G32Uint               = R32G32              | RUint  | GUint  | BUint  | AUint,
            R32G32Sint               = R32G32              | RSint  | GSint  | BSint  | ASint,
            R32G32B32Float           = R32G32B32           | RFloat | GFloat | BFloat | AFloat,
            R32G32B32Uint            = R32G32B32           | RUint  | GUint  | BUint  | AUint,
            R32G32B32Sint            = R32G32B32           | RSint  | GSint  | BSint  | ASint,
            A8B8G8R8Unorm            = A8B8G8R8            | RUnorm | GUnorm | BUnorm | AUnorm,
            A8B8G8R8Snorm            = A8B8G8R8            | RSnorm | GSnorm | BSnorm | ASnorm,
            A8B8G8R8Uint             = A8B8G8R8            | RUint  | GUint  | BUint  | AUint,
            A8B8G8R8Sint             = A8B8G8R8            | RSint  | GSint  | BSint  | ASint,
            R16G16B16A16Float        = R16G16B16A16        | RFloat | GFloat | BFloat | AFloat,
            R16G16B16A16Unorm        = R16G16B16A16        | RUnorm | GUnorm | BUnorm | AUnorm,
            R16G16B16A16Snorm        = R16G16B16A16        | RSnorm | GSnorm | BSnorm | ASnorm,
            R16G16B16A16Uint         = R16G16B16A16        | RUint  | GUint  | BUint  | AUint,
            R16G16B16A16Sint         = R16G16B16A16        | RSint  | GSint  | BSint  | ASint,
            R32G32B32A32Float        = R32G32B32A32        | RFloat | GFloat | BFloat | AFloat,
            R32G32B32A32Uint         = R32G32B32A32        | RUint  | GUint  | BUint  | AUint,
            R32G32B32A32Sint         = R32G32B32A32        | RSint  | GSint  | BSint  | ASint,
            X8Z24X20V4S8COV4R4VUnorm = X8Z24X20V4S8COV4R4V | RUnorm | GUnorm | BUnorm | AUnorm,
            Zf32Float                = Zf32                | RFloat | GFloat | BFloat | AFloat,
            G24R8UintUnorm           = G24R8               | RUint  | GUnorm | BUnorm | AUnorm,
            Z24S8UintUnormUnorm      = Z24S8               | RUint  | GUnorm | BUnorm | AUnorm,
            Z24S8UintUnormUint       = Z24S8               | RUint  | GUnorm | BUint  | AUint,
            R32B24G8FloatUint        = R32B24G8            | RFloat | GUint  | BUnorm | AUnorm,
            Zf32X24S8FloatUint       = Zf32X24S8           | RFloat | GUint  | BUnorm | AUnorm,
            A8B8G8R8UnormSrgb        = A8B8G8R8            | RUnorm | GUnorm | BUnorm | AUnorm | Srgb,
            A4B4G4R4Unorm            = A4B4G4R4            | RUnorm | GUnorm | BUnorm | AUnorm,
            A1B5G5R5Unorm            = A1B5G5R5            | RUnorm | GUnorm | BUnorm | AUnorm,
            B5G6R5Unorm              = B5G6R5              | RUnorm | GUnorm | BUnorm | AUnorm,
            A2B10G10R10Unorm         = A2B10G10R10         | RUnorm | GUnorm | BUnorm | AUnorm,
            A2B10G10R10Uint          = A2B10G10R10         | RUint  | GUint  | BUint  | AUint,
            Bf10GF11RF11Float        = Bf10GF11RF11        | RFloat | GFloat | BFloat | AFloat,
            E5B9G9R9SharedExpFloat   = E5B9G9R9SharedExp   | RFloat | GFloat | BFloat | AFloat,
            Bc1Unorm                 = Bc1                 | RUnorm | GUnorm | BUnorm | AUnorm,
            Bc2Unorm                 = Bc2                 | RUnorm | GUnorm | BUnorm | AUnorm,
            Bc3Unorm                 = Bc3                 | RUnorm | GUnorm | BUnorm | AUnorm,
            Bc1UnormSrgb             = Bc1                 | RUnorm | GUnorm | BUnorm | AUnorm | Srgb,
            Bc2UnormSrgb             = Bc2                 | RUnorm | GUnorm | BUnorm | AUnorm | Srgb,
            Bc3UnormSrgb             = Bc3                 | RUnorm | GUnorm | BUnorm | AUnorm | Srgb,
            Bc4Unorm                 = Bc4                 | RUnorm | GUnorm | BUnorm | AUnorm,
            Bc4Snorm                 = Bc4                 | RSnorm | GSnorm | BSnorm | ASnorm,
            Bc5Unorm                 = Bc5                 | RUnorm | GUnorm | BUnorm | AUnorm,
            Bc5Snorm                 = Bc5                 | RSnorm | GSnorm | BSnorm | ASnorm,
            Bc7UUnorm                = Bc7U                | RUnorm | GUnorm | BUnorm | AUnorm,
            Bc7UUnormSrgb            = Bc7U                | RUnorm | GUnorm | BUnorm | AUnorm | Srgb,
            Bc6HSfloatFloat          = Bc6HSfloat          | RFloat | GFloat | BFloat | AFloat,
            Bc6HUfloatFloat          = Bc6HUfloat          | RFloat | GFloat | BFloat | AFloat,
            Etc2RgbaUnorm            = Etc2Rgba            | RUnorm | GUnorm | BUnorm | AUnorm,
            Etc2RgbaUnormSrgb        = Etc2Rgba            | RUnorm | GUnorm | BUnorm | AUnorm | Srgb,
            Astc2D4x4Unorm           = Astc2D4X4           | RUnorm | GUnorm | BUnorm | AUnorm,
            Astc2D5x4Unorm           = Astc2D5x4           | RUnorm | GUnorm | BUnorm | AUnorm,
            Astc2D5x5Unorm           = Astc2D5x5           | RUnorm | GUnorm | BUnorm | AUnorm,
            Astc2D6x5Unorm           = Astc2D6x5           | RUnorm | GUnorm | BUnorm | AUnorm,
            Astc2D6x6Unorm           = Astc2D6x6           | RUnorm | GUnorm | BUnorm | AUnorm,
            Astc2D8x5Unorm           = Astc2D8x5           | RUnorm | GUnorm | BUnorm | AUnorm,
            Astc2D8x6Unorm           = Astc2D8x6           | RUnorm | GUnorm | BUnorm | AUnorm,
            Astc2D8x8Unorm           = Astc2D8x8           | RUnorm | GUnorm | BUnorm | AUnorm,
            Astc2D10x5Unorm          = Astc2D10x5          | RUnorm | GUnorm | BUnorm | AUnorm,
            Astc2D10x6Unorm          = Astc2D10x6          | RUnorm | GUnorm | BUnorm | AUnorm,
            Astc2D10x8Unorm          = Astc2D10x8          | RUnorm | GUnorm | BUnorm | AUnorm,
            Astc2D10x10Unorm         = Astc2D10x10         | RUnorm | GUnorm | BUnorm | AUnorm,
            Astc2D12x10Unorm         = Astc2D12x10         | RUnorm | GUnorm | BUnorm | AUnorm,
            Astc2D12x12Unorm         = Astc2D12x12         | RUnorm | GUnorm | BUnorm | AUnorm,
            Astc2D4x4UnormSrgb       = Astc2D4X4           | RUnorm | GUnorm | BUnorm | AUnorm | Srgb,
            Astc2D5x4UnormSrgb       = Astc2D5x4           | RUnorm | GUnorm | BUnorm | AUnorm | Srgb,
            Astc2D5x5UnormSrgb       = Astc2D5x5           | RUnorm | GUnorm | BUnorm | AUnorm | Srgb,
            Astc2D6x5UnormSrgb       = Astc2D6x5           | RUnorm | GUnorm | BUnorm | AUnorm | Srgb,
            Astc2D6x6UnormSrgb       = Astc2D6x6           | RUnorm | GUnorm | BUnorm | AUnorm | Srgb,
            Astc2D8x5UnormSrgb       = Astc2D8x5           | RUnorm | GUnorm | BUnorm | AUnorm | Srgb,
            Astc2D8x6UnormSrgb       = Astc2D8x6           | RUnorm | GUnorm | BUnorm | AUnorm | Srgb,
            Astc2D8x8UnormSrgb       = Astc2D8x8           | RUnorm | GUnorm | BUnorm | AUnorm | Srgb,
            Astc2D10x5UnormSrgb      = Astc2D10x5          | RUnorm | GUnorm | BUnorm | AUnorm | Srgb,
            Astc2D10x6UnormSrgb      = Astc2D10x6          | RUnorm | GUnorm | BUnorm | AUnorm | Srgb,
            Astc2D10x8UnormSrgb      = Astc2D10x8          | RUnorm | GUnorm | BUnorm | AUnorm | Srgb,
            Astc2D10x10UnormSrgb     = Astc2D10x10         | RUnorm | GUnorm | BUnorm | AUnorm | Srgb,
            Astc2D12x10UnormSrgb     = Astc2D12x10         | RUnorm | GUnorm | BUnorm | AUnorm | Srgb,
            Astc2D12x12UnormSrgb     = Astc2D12x12         | RUnorm | GUnorm | BUnorm | AUnorm | Srgb,
            A5B5G5R1Unorm            = A5B5G5R1            | RUnorm | GUnorm | BUnorm | AUnorm,
        }

        private static Dictionary<GpuFormat, FormatInfo> _textureFormats = new Dictionary<GpuFormat, FormatInfo>()
        {
            { GpuFormat.R8Unorm,                  new FormatInfo(Format.R8Unorm,           1,  1,  1,  1) },
            { GpuFormat.R8Snorm,                  new FormatInfo(Format.R8Snorm,           1,  1,  1,  1) },
            { GpuFormat.R8Uint,                   new FormatInfo(Format.R8Uint,            1,  1,  1,  1) },
            { GpuFormat.R8Sint,                   new FormatInfo(Format.R8Sint,            1,  1,  1,  1) },
            { GpuFormat.R16Float,                 new FormatInfo(Format.R16Float,          1,  1,  2,  1) },
            { GpuFormat.R16Unorm,                 new FormatInfo(Format.R16Unorm,          1,  1,  2,  1) },
            { GpuFormat.R16Snorm,                 new FormatInfo(Format.R16Snorm,          1,  1,  2,  1) },
            { GpuFormat.R16Uint,                  new FormatInfo(Format.R16Uint,           1,  1,  2,  1) },
            { GpuFormat.R16Sint,                  new FormatInfo(Format.R16Sint,           1,  1,  2,  1) },
            { GpuFormat.R32Float,                 new FormatInfo(Format.R32Float,          1,  1,  4,  1) },
            { GpuFormat.R32Uint,                  new FormatInfo(Format.R32Uint,           1,  1,  4,  1) },
            { GpuFormat.R32Sint,                  new FormatInfo(Format.R32Sint,           1,  1,  4,  1) },
            { GpuFormat.G8R8Unorm,                new FormatInfo(Format.R8G8Unorm,         1,  1,  2,  2) },
            { GpuFormat.G8R8Snorm,                new FormatInfo(Format.R8G8Snorm,         1,  1,  2,  2) },
            { GpuFormat.G8R8Uint,                 new FormatInfo(Format.R8G8Uint,          1,  1,  2,  2) },
            { GpuFormat.G8R8Sint,                 new FormatInfo(Format.R8G8Sint,          1,  1,  2,  2) },
            { GpuFormat.R16G16Float,              new FormatInfo(Format.R16G16Float,       1,  1,  4,  2) },
            { GpuFormat.R16G16Unorm,              new FormatInfo(Format.R16G16Unorm,       1,  1,  4,  2) },
            { GpuFormat.R16G16Snorm,              new FormatInfo(Format.R16G16Snorm,       1,  1,  4,  2) },
            { GpuFormat.R16G16Uint,               new FormatInfo(Format.R16G16Uint,        1,  1,  4,  2) },
            { GpuFormat.R16G16Sint,               new FormatInfo(Format.R16G16Sint,        1,  1,  4,  2) },
            { GpuFormat.R32G32Float,              new FormatInfo(Format.R32G32Float,       1,  1,  8,  2) },
            { GpuFormat.R32G32Uint,               new FormatInfo(Format.R32G32Uint,        1,  1,  8,  2) },
            { GpuFormat.R32G32Sint,               new FormatInfo(Format.R32G32Sint,        1,  1,  8,  2) },
            { GpuFormat.R32G32B32Float,           new FormatInfo(Format.R32G32B32Float,    1,  1,  12, 3) },
            { GpuFormat.R32G32B32Uint,            new FormatInfo(Format.R32G32B32Uint,     1,  1,  12, 3) },
            { GpuFormat.R32G32B32Sint,            new FormatInfo(Format.R32G32B32Sint,     1,  1,  12, 3) },
            { GpuFormat.A8B8G8R8Unorm,            new FormatInfo(Format.R8G8B8A8Unorm,     1,  1,  4,  4) },
            { GpuFormat.A8B8G8R8Snorm,            new FormatInfo(Format.R8G8B8A8Snorm,     1,  1,  4,  4) },
            { GpuFormat.A8B8G8R8Uint,             new FormatInfo(Format.R8G8B8A8Uint,      1,  1,  4,  4) },
            { GpuFormat.A8B8G8R8Sint,             new FormatInfo(Format.R8G8B8A8Sint,      1,  1,  4,  4) },
            { GpuFormat.R16G16B16A16Float,        new FormatInfo(Format.R16G16B16A16Float, 1,  1,  8,  4) },
            { GpuFormat.R16G16B16A16Unorm,        new FormatInfo(Format.R16G16B16A16Unorm, 1,  1,  8,  4) },
            { GpuFormat.R16G16B16A16Snorm,        new FormatInfo(Format.R16G16B16A16Snorm, 1,  1,  8,  4) },
            { GpuFormat.R16G16B16A16Uint,         new FormatInfo(Format.R16G16B16A16Uint,  1,  1,  8,  4) },
            { GpuFormat.R16G16B16A16Sint,         new FormatInfo(Format.R16G16B16A16Sint,  1,  1,  8,  4) },
            { GpuFormat.R32G32B32A32Float,        new FormatInfo(Format.R32G32B32A32Float, 1,  1,  16, 4) },
            { GpuFormat.R32G32B32A32Uint,         new FormatInfo(Format.R32G32B32A32Uint,  1,  1,  16, 4) },
            { GpuFormat.R32G32B32A32Sint,         new FormatInfo(Format.R32G32B32A32Sint,  1,  1,  16, 4) },
            { GpuFormat.X8Z24X20V4S8COV4R4VUnorm, new FormatInfo(Format.D16Unorm,          1,  1,  2,  1) },
            { GpuFormat.Zf32Float,                new FormatInfo(Format.D32Float,          1,  1,  4,  1) },
            { GpuFormat.G24R8UintUnorm,           new FormatInfo(Format.D24UnormS8Uint,    1,  1,  4,  2) },
            { GpuFormat.Z24S8UintUnormUnorm,      new FormatInfo(Format.D24UnormS8Uint,    1,  1,  4,  2) },
            { GpuFormat.Z24S8UintUnormUint,       new FormatInfo(Format.D24UnormS8Uint,    1,  1,  4,  2) },
            { GpuFormat.R32B24G8FloatUint,        new FormatInfo(Format.D32FloatS8Uint,    1,  1,  8,  2) },
            { GpuFormat.Zf32X24S8FloatUint,       new FormatInfo(Format.D32FloatS8Uint,    1,  1,  8,  2) },
            { GpuFormat.A8B8G8R8UnormSrgb,        new FormatInfo(Format.R8G8B8A8Srgb,      1,  1,  4,  4) },
            { GpuFormat.A4B4G4R4Unorm,            new FormatInfo(Format.R4G4B4A4Unorm,     1,  1,  2,  4) },
            { GpuFormat.A1B5G5R5Unorm,            new FormatInfo(Format.R5G5B5A1Unorm,     1,  1,  2,  4) },
            { GpuFormat.B5G6R5Unorm,              new FormatInfo(Format.R5G6B5Unorm,       1,  1,  2,  3) },
            { GpuFormat.A2B10G10R10Unorm,         new FormatInfo(Format.R10G10B10A2Unorm,  1,  1,  4,  4) },
            { GpuFormat.A2B10G10R10Uint,          new FormatInfo(Format.R10G10B10A2Uint,   1,  1,  4,  4) },
            { GpuFormat.Bf10GF11RF11Float,        new FormatInfo(Format.R11G11B10Float,    1,  1,  4,  3) },
            { GpuFormat.E5B9G9R9SharedExpFloat,   new FormatInfo(Format.R9G9B9E5Float,     1,  1,  4,  4) },
            { GpuFormat.Bc1Unorm,                 new FormatInfo(Format.Bc1RgbaUnorm,      4,  4,  8,  4) },
            { GpuFormat.Bc2Unorm,                 new FormatInfo(Format.Bc2Unorm,          4,  4,  16, 4) },
            { GpuFormat.Bc3Unorm,                 new FormatInfo(Format.Bc3Unorm,          4,  4,  16, 4) },
            { GpuFormat.Bc1UnormSrgb,             new FormatInfo(Format.Bc1RgbaSrgb,       4,  4,  8,  4) },
            { GpuFormat.Bc2UnormSrgb,             new FormatInfo(Format.Bc2Srgb,           4,  4,  16, 4) },
            { GpuFormat.Bc3UnormSrgb,             new FormatInfo(Format.Bc3Srgb,           4,  4,  16, 4) },
            { GpuFormat.Bc4Unorm,                 new FormatInfo(Format.Bc4Unorm,          4,  4,  8,  1) },
            { GpuFormat.Bc4Snorm,                 new FormatInfo(Format.Bc4Snorm,          4,  4,  8,  1) },
            { GpuFormat.Bc5Unorm,                 new FormatInfo(Format.Bc5Unorm,          4,  4,  16, 2) },
            { GpuFormat.Bc5Snorm,                 new FormatInfo(Format.Bc5Snorm,          4,  4,  16, 2) },
            { GpuFormat.Bc7UUnorm,                new FormatInfo(Format.Bc7Unorm,          4,  4,  16, 4) },
            { GpuFormat.Bc7UUnormSrgb,            new FormatInfo(Format.Bc7Srgb,           4,  4,  16, 4) },
            { GpuFormat.Bc6HSfloatFloat,          new FormatInfo(Format.Bc6HSfloat,        4,  4,  16, 4) },
            { GpuFormat.Bc6HUfloatFloat,          new FormatInfo(Format.Bc6HUfloat,        4,  4,  16, 4) },
            { GpuFormat.Etc2RgbaUnorm,            new FormatInfo(Format.Etc2RgbaUnorm,     4,  4,  16, 4) },
            { GpuFormat.Etc2RgbaUnormSrgb,        new FormatInfo(Format.Etc2RgbaSrgb,      4,  4,  16, 4) },
            { GpuFormat.Astc2D4x4Unorm,           new FormatInfo(Format.Astc4x4Unorm,      4,  4,  16, 4) },
            { GpuFormat.Astc2D5x4Unorm,           new FormatInfo(Format.Astc5x4Unorm,      5,  4,  16, 4) },
            { GpuFormat.Astc2D5x5Unorm,           new FormatInfo(Format.Astc5x5Unorm,      5,  5,  16, 4) },
            { GpuFormat.Astc2D6x5Unorm,           new FormatInfo(Format.Astc6x5Unorm,      6,  5,  16, 4) },
            { GpuFormat.Astc2D6x6Unorm,           new FormatInfo(Format.Astc6x6Unorm,      6,  6,  16, 4) },
            { GpuFormat.Astc2D8x5Unorm,           new FormatInfo(Format.Astc8x5Unorm,      8,  5,  16, 4) },
            { GpuFormat.Astc2D8x6Unorm,           new FormatInfo(Format.Astc8x6Unorm,      8,  6,  16, 4) },
            { GpuFormat.Astc2D8x8Unorm,           new FormatInfo(Format.Astc8x8Unorm,      8,  8,  16, 4) },
            { GpuFormat.Astc2D10x5Unorm,          new FormatInfo(Format.Astc10x5Unorm,     10, 5,  16, 4) },
            { GpuFormat.Astc2D10x6Unorm,          new FormatInfo(Format.Astc10x6Unorm,     10, 6,  16, 4) },
            { GpuFormat.Astc2D10x8Unorm,          new FormatInfo(Format.Astc10x8Unorm,     10, 8,  16, 4) },
            { GpuFormat.Astc2D10x10Unorm,         new FormatInfo(Format.Astc10x10Unorm,    10, 10, 16, 4) },
            { GpuFormat.Astc2D12x10Unorm,         new FormatInfo(Format.Astc12x10Unorm,    12, 10, 16, 4) },
            { GpuFormat.Astc2D12x12Unorm,         new FormatInfo(Format.Astc12x12Unorm,    12, 12, 16, 4) },
            { GpuFormat.Astc2D4x4UnormSrgb,       new FormatInfo(Format.Astc4x4Srgb,       4,  4,  16, 4) },
            { GpuFormat.Astc2D5x4UnormSrgb,       new FormatInfo(Format.Astc5x4Srgb,       5,  4,  16, 4) },
            { GpuFormat.Astc2D5x5UnormSrgb,       new FormatInfo(Format.Astc5x5Srgb,       5,  5,  16, 4) },
            { GpuFormat.Astc2D6x5UnormSrgb,       new FormatInfo(Format.Astc6x5Srgb,       6,  5,  16, 4) },
            { GpuFormat.Astc2D6x6UnormSrgb,       new FormatInfo(Format.Astc6x6Srgb,       6,  6,  16, 4) },
            { GpuFormat.Astc2D8x5UnormSrgb,       new FormatInfo(Format.Astc8x5Srgb,       8,  5,  16, 4) },
            { GpuFormat.Astc2D8x6UnormSrgb,       new FormatInfo(Format.Astc8x6Srgb,       8,  6,  16, 4) },
            { GpuFormat.Astc2D8x8UnormSrgb,       new FormatInfo(Format.Astc8x8Srgb,       8,  8,  16, 4) },
            { GpuFormat.Astc2D10x5UnormSrgb,      new FormatInfo(Format.Astc10x5Srgb,      10, 5,  16, 4) },
            { GpuFormat.Astc2D10x6UnormSrgb,      new FormatInfo(Format.Astc10x6Srgb,      10, 6,  16, 4) },
            { GpuFormat.Astc2D10x8UnormSrgb,      new FormatInfo(Format.Astc10x8Srgb,      10, 8,  16, 4) },
            { GpuFormat.Astc2D10x10UnormSrgb,     new FormatInfo(Format.Astc10x10Srgb,     10, 10, 16, 4) },
            { GpuFormat.Astc2D12x10UnormSrgb,     new FormatInfo(Format.Astc12x10Srgb,     12, 10, 16, 4) },
            { GpuFormat.Astc2D12x12UnormSrgb,     new FormatInfo(Format.Astc12x12Srgb,     12, 12, 16, 4) },
            { GpuFormat.A5B5G5R1Unorm,            new FormatInfo(Format.A1B5G5R5Unorm,     1,  1,  2,  4) }
        };

        private static Dictionary<ulong, Format> _attribFormats = new Dictionary<ulong, Format>()
        {
            { 0x13a00000, Format.R8Unorm             },
            { 0x0ba00000, Format.R8Snorm             },
            { 0x23a00000, Format.R8Uint              },
            { 0x1ba00000, Format.R8Sint              },
            { 0x3b600000, Format.R16Float            },
            { 0x13600000, Format.R16Unorm            },
            { 0x0b600000, Format.R16Snorm            },
            { 0x23600000, Format.R16Uint             },
            { 0x1b600000, Format.R16Sint             },
            { 0x3a400000, Format.R32Float            },
            { 0x22400000, Format.R32Uint             },
            { 0x1a400000, Format.R32Sint             },
            { 0x13000000, Format.R8G8Unorm           },
            { 0x0b000000, Format.R8G8Snorm           },
            { 0x23000000, Format.R8G8Uint            },
            { 0x1b000000, Format.R8G8Sint            },
            { 0x39e00000, Format.R16G16Float         },
            { 0x11e00000, Format.R16G16Unorm         },
            { 0x09e00000, Format.R16G16Snorm         },
            { 0x21e00000, Format.R16G16Uint          },
            { 0x19e00000, Format.R16G16Sint          },
            { 0x38800000, Format.R32G32Float         },
            { 0x20800000, Format.R32G32Uint          },
            { 0x18800000, Format.R32G32Sint          },
            { 0x12600000, Format.R8G8B8Unorm         },
            { 0x0a600000, Format.R8G8B8Snorm         },
            { 0x22600000, Format.R8G8B8Uint          },
            { 0x1a600000, Format.R8G8B8Sint          },
            { 0x38a00000, Format.R16G16B16Float      },
            { 0x10a00000, Format.R16G16B16Unorm      },
            { 0x08a00000, Format.R16G16B16Snorm      },
            { 0x20a00000, Format.R16G16B16Uint       },
            { 0x18a00000, Format.R16G16B16Sint       },
            { 0x38400000, Format.R32G32B32Float      },
            { 0x20400000, Format.R32G32B32Uint       },
            { 0x18400000, Format.R32G32B32Sint       },
            { 0x11400000, Format.R8G8B8A8Unorm       },
            { 0x09400000, Format.R8G8B8A8Snorm       },
            { 0x21400000, Format.R8G8B8A8Uint        },
            { 0x19400000, Format.R8G8B8A8Sint        },
            { 0x38600000, Format.R16G16B16A16Float   },
            { 0x10600000, Format.R16G16B16A16Unorm   },
            { 0x08600000, Format.R16G16B16A16Snorm   },
            { 0x20600000, Format.R16G16B16A16Uint    },
            { 0x18600000, Format.R16G16B16A16Sint    },
            { 0x38200000, Format.R32G32B32A32Float   },
            { 0x20200000, Format.R32G32B32A32Uint    },
            { 0x18200000, Format.R32G32B32A32Sint    },
            { 0x16000000, Format.R10G10B10A2Unorm    },
            { 0x26000000, Format.R10G10B10A2Uint     },
            { 0x3e200000, Format.R11G11B10Float      },
            { 0x2ba00000, Format.R8Uscaled           },
            { 0x33a00000, Format.R8Sscaled           },
            { 0x2b600000, Format.R16Uscaled          },
            { 0x33600000, Format.R16Sscaled          },
            { 0x2a400000, Format.R32Uscaled          },
            { 0x32400000, Format.R32Sscaled          },
            { 0x2b000000, Format.R8G8Uscaled         },
            { 0x33000000, Format.R8G8Sscaled         },
            { 0x29e00000, Format.R16G16Uscaled       },
            { 0x31e00000, Format.R16G16Sscaled       },
            { 0x28800000, Format.R32G32Uscaled       },
            { 0x30800000, Format.R32G32Sscaled       },
            { 0x2a600000, Format.R8G8B8Uscaled       },
            { 0x32600000, Format.R8G8B8Sscaled       },
            { 0x28a00000, Format.R16G16B16Uscaled    },
            { 0x30a00000, Format.R16G16B16Sscaled    },
            { 0x28400000, Format.R32G32B32Uscaled    },
            { 0x30400000, Format.R32G32B32Sscaled    },
            { 0x29400000, Format.R8G8B8A8Uscaled     },
            { 0x31400000, Format.R8G8B8A8Sscaled     },
            { 0x28600000, Format.R16G16B16A16Uscaled },
            { 0x30600000, Format.R16G16B16A16Sscaled },
            { 0x28200000, Format.R32G32B32A32Uscaled },
            { 0x30200000, Format.R32G32B32A32Sscaled },
            { 0x0e000000, Format.R10G10B10A2Snorm    },
            { 0x1e000000, Format.R10G10B10A2Sint     },
            { 0x2e000000, Format.R10G10B10A2Uscaled  },
            { 0x36000000, Format.R10G10B10A2Sscaled  }
        };

        /// <summary>
        /// Try getting the texture format from an encoded format integer from the Maxwell texture descriptor.
        /// </summary>
        /// <param name="encoded">The encoded format integer from the texture descriptor</param>
        /// <param name="isSrgb">Indicates if the format is a sRGB format</param>
        /// <param name="format">The output texture format</param>
        /// <returns>True if the format is valid, false otherwise</returns>
        public static bool TryGetTextureFormat(uint encoded, bool isSrgb, out FormatInfo format)
        {
            encoded |= (isSrgb ? 1u << 19 : 0u);

            return _textureFormats.TryGetValue((GpuFormat)encoded, out format);
        }

        /// <summary>
        /// Try getting the vertex attribute format from an encoded format integer from Maxwell attribute registers.
        /// </summary>
        /// <param name="encoded">The encoded format integer from the attribute registers</param>
        /// <param name="format">The output vertex attribute format</param>
        /// <returns>True if the format is valid, false otherwise</returns>
        public static bool TryGetAttribFormat(uint encoded, out Format format)
        {
            return _attribFormats.TryGetValue(encoded, out format);
        }
    }
}