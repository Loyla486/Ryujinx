using Ryujinx.Horizon.Sdk.Sf;

namespace Ryujinx.Horizon.Sdk.Hid
{
    interface IHidDebugServer : IServiceObject
    {
        // Result DeactivateDebugPad();
        // Result SetDebugPadAutoPilotState(DebugPadAutoPilotState arg0);
        // Result UnsetDebugPadAutoPilotState();
        // Result DeactivateTouchScreen();
        // Result SetTouchScreenAutoPilotState(ReadOnlySpan<TouchState> arg0);
        // Result UnsetTouchScreenAutoPilotState();
        // Result GetTouchScreenConfiguration(out TouchScreenConfigurationForNx arg0, AppletResourceUserId arg1, ulong pid);
        // Result ProcessTouchScreenAutoTune();
        // Result ForceStopTouchScreenManagement();
        // Result ForceRestartTouchScreenManagement(AppletResourceUserId arg0, int arg1, ulong pid);
        // Result IsTouchScreenManaged(out bool arg0);
        // Result DeactivateMouse();
        // Result SetMouseAutoPilotState(MouseAutoPilotState arg0);
        // Result UnsetMouseAutoPilotState();
        // Result DeactivateKeyboard();
        // Result SetKeyboardAutoPilotState(KeyboardAutoPilotState arg0);
        // Result UnsetKeyboardAutoPilotState();
        // Result DeactivateXpad(BasicXpadId arg0);
        // Result ClearNpadSystemCommonPolicy(AppletResourceUserId arg0, ulong pid);
        // Result DeactivateNpad(AppletResourceUserId arg0, ulong pid);
        // Result ForceDisconnectNpad(uint arg0);
        // Result DeactivateGesture();
        // Result DeactivateHomeButton();
        // Result SetHomeButtonAutoPilotState(HomeButtonAutoPilotState arg0);
        // Result UnsetHomeButtonAutoPilotState();
        // Result DeactivateSleepButton();
        // Result SetSleepButtonAutoPilotState(SleepButtonAutoPilotState arg0);
        // Result UnsetSleepButtonAutoPilotState();
        // Result DeactivateCaptureButton();
        // Result SetCaptureButtonAutoPilotState(CaptureButtonAutoPilotState arg0);
        // Result UnsetCaptureButtonAutoPilotState();
        // Result SetShiftAccelerometerCalibrationValue(SixAxisSensorHandle arg0, AppletResourceUserId arg1, float arg2, float arg3, ulong pid);
        // Result GetShiftAccelerometerCalibrationValue(out float arg0, out float arg1, SixAxisSensorHandle arg2, AppletResourceUserId arg3, ulong pid);
        // Result SetShiftGyroscopeCalibrationValue(SixAxisSensorHandle arg0, AppletResourceUserId arg1, float arg2, float arg3, ulong pid);
        // Result GetShiftGyroscopeCalibrationValue(out float arg0, out float arg1, SixAxisSensorHandle arg2, AppletResourceUserId arg3, ulong pid);
        // Result DeactivateConsoleSixAxisSensor();
        // Result GetConsoleSixAxisSensorSamplingFrequency(out long arg0, AppletResourceUserId arg1, ulong pid);
        // Result DeactivateSevenSixAxisSensor();
        // Result GetConsoleSixAxisSensorCountStates(out int arg0, Span<ConsoleSixAxisSensorCountState> arg1, AppletResourceUserId arg2, ulong pid);
        // Result GetAccelerometerFsr(out AccelerometerFsr arg0, AppletResourceUserId arg1, ulong pid);
        // Result SetAccelerometerFsr(AccelerometerFsr arg0, AppletResourceUserId arg1, ulong pid);
        // Result GetAccelerometerOdr(out AccelerometerOdr arg0, AppletResourceUserId arg1, ulong pid);
        // Result SetAccelerometerOdr(AccelerometerOdr arg0, AppletResourceUserId arg1, ulong pid);
        // Result GetGyroscopeFsr(out GyroscopeFsr arg0, AppletResourceUserId arg1, ulong pid);
        // Result SetGyroscopeFsr(GyroscopeFsr arg0, AppletResourceUserId arg1, ulong pid);
        // Result GetGyroscopeOdr(out GyroscopeOdr arg0, AppletResourceUserId arg1, ulong pid);
        // Result SetGyroscopeOdr(GyroscopeOdr arg0, AppletResourceUserId arg1, ulong pid);
        // Result GetWhoAmI(out WhoAmIValue arg0, AppletResourceUserId arg1, ulong pid);
        // Result ActivateFirmwareUpdate();
        // Result DeactivateFirmwareUpdate();
        // Result StartFirmwareUpdate(UniquePadId arg0);
        // Result GetFirmwareUpdateStage(out long arg0, out long arg1);
        // Result GetFirmwareVersion(out FirmwareVersion arg0, uint arg1, DeviceType arg2);
        // Result GetDestinationFirmwareVersion(out FirmwareVersion arg0, uint arg1, DeviceType arg2);
        // Result DiscardFirmwareInfoCacheForRevert();
        // Result StartFirmwareUpdateForRevert(UniquePadId arg0);
        // Result GetAvailableFirmwareVersionForRevert(out FirmwareVersion arg0, UniquePadId arg1);
        // Result IsFirmwareUpdatingDevice(out bool arg0, UniquePadId arg1);
        // Result StartFirmwareUpdateIndividual(out FirmwareUpdateDeviceHandle arg0, UniquePadId arg1, long arg2, int arg3, ulong arg4);
        // Result SetUsbFirmwareForceUpdateEnabled(bool arg0);
        // Result SetAllKuinaDevicesToFirmwareUpdateMode();
        // Result UpdateControllerColor(Unorm8x4 arg0, Unorm8x4 arg1, UniquePadId arg2);
        // Result ConnectUsbPadsAsync();
        // Result DisconnectUsbPadsAsync();
        // Result UpdateDesignInfo(Unorm8x4 arg0, Unorm8x4 arg1, Unorm8x4 arg2, Unorm8x4 arg3, uint arg4, UniquePadId arg5);
        // Result GetUniquePadDriverState(out PadRawState arg0, UniquePadId arg1);
        // Result GetSixAxisSensorDriverStates(out long arg0, Span<SixAxisSensorState> arg1, UniquePadId arg2);
        // Result GetRxPacketHistory(out JoyConFormatPacketRxHistory arg0, UniquePadId arg1);
        // Result AcquireOperationEventHandle(out int arg0, UniquePadId arg1);
        // Result ReadSerialFlash(uint arg0, int arg1, ulong arg2, UniquePadId arg3);
        // Result WriteSerialFlash(uint arg0, int arg1, ulong arg2, ulong arg3, UniquePadId arg4);
        // Result GetOperationResult(UniquePadId arg0);
        // Result EnableShipmentMode(UniquePadId arg0);
        // Result ClearPairingInfo(UniquePadId arg0);
        // Result GetUniquePadDeviceTypeSetInternal(out DeviceType arg0, UniquePadId arg1);
        // Result EnableAnalogStickPower(bool arg0, UniquePadId arg1);
        // Result RequestKuinaUartClockCal(UniquePadId arg0);
        // Result GetKuinaUartClockCal(out byte arg0, UniquePadId arg1);
        // Result SetKuinaUartClockTrim(UniquePadId arg0, byte arg1);
        // Result KuinaLoopbackTest(UniquePadId arg0);
        // Result RequestBatteryVoltage(UniquePadId arg0);
        // Result GetBatteryVoltage(out ushort arg0, UniquePadId arg1);
        // Result GetUniquePadPowerInfo(out PowerInfo arg0, UniquePadId arg1);
        // Result RebootUniquePad(UniquePadId arg0);
        // Result RequestKuinaFirmwareVersion(UniquePadId arg0);
        // Result GetKuinaFirmwareVersion(out UsbFirmwareVersion arg0, UniquePadId arg1);
        // Result GetVidPid(out ushort arg0, out ushort arg1, UniquePadId arg2);
        // Result GetAnalogStickCalibrationValue(out AnalogStickCalibrationValue arg0, UniquePadId arg1, AnalogStickDeviceType arg2);
        // Result GetUniquePadIdsFull(out int arg0, Span<UniquePadId> arg1);
        // Result ConnectUniquePad(UniquePadId arg0);
        // Result IsVirtual(out bool arg0, out bool arg1, UniquePadId arg2);
        // Result GetAnalogStickModuleParam(out AnalogStickModuleParam arg0, UniquePadId arg1, AnalogStickDeviceType arg2);
        // Result UnsetAllAutoPilotVirtualPadState();
        // Result AttachHdlsWorkBuffer(out HdlsSessionId arg0, int arg1, ulong arg2);
        // Result ReleaseHdlsWorkBuffer(HdlsSessionId arg0);
        // Result DumpHdlsNpadAssignmentState(HdlsSessionId arg0);
        // Result DumpHdlsStates(HdlsSessionId arg0);
        // Result ApplyHdlsNpadAssignmentState(HdlsSessionId arg0, bool arg1);
        // Result ApplyHdlsStateList(HdlsSessionId arg0);
        // Result AttachHdlsVirtualDevice(out HdlsHandle arg0, HdlsDeviceInfo arg1);
        // Result DetachHdlsVirtualDevice(HdlsHandle arg0);
        // Result SetHdlsState(HdlsHandle arg0, HdlsState arg1);
        // Result AddRegisteredDevice(RegisteredDevice arg0);
        // Result DisableExternalMcuOnNxDevice(bool arg0);
        // Result DisableRailDeviceFiltering(bool arg0);
        // Result EnableWiredPairing(bool arg0);
        // Result EnableShipmentModeAutoClear(bool arg0);
        // Result SetRailEnabled(bool arg0);
        // Result SetFactoryInt(bool arg0, UniquePadId arg1);
        // Result IsFactoryBootEnabled(out bool arg0, UniquePadId arg1);
        // Result SetAnalogStickModelDataTemporarily(AnalogStickModelData arg0, UniquePadId arg1, int arg2);
        // Result GetAnalogStickModelData(out AnalogStickModelData arg0, out bool arg1, UniquePadId arg2, int arg3);
        // Result ResetAnalogStickModelData(UniquePadId arg0, int arg1);
        // Result ConvertPadState(out PadState arg0, PadState arg1, UniquePadId arg2);
        // Result AddButtonPlayData(ButtonPlayData arg0, UniquePadId arg1);
        // Result StartButtonPlayData(UniquePadId arg0);
        // Result StopButtonPlayData(UniquePadId arg0);
        // Result DeactivateDigitizer();
        // Result SetDigitizerAutoPilotState(DigitizerAutoPilotState arg0);
        // Result UnsetDigitizerAutoPilotState();
    }
}
